// Generated by CoffeeScript 1.6.3
var namespace,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

namespace = function(target, name, block) {
  var item, top, _i, _len, _ref, _ref1;
  if (arguments.length < 3) {
    _ref = [(typeof exports !== 'undefined' ? exports : window)].concat(__slice.call(arguments)), target = _ref[0], name = _ref[1], block = _ref[2];
  }
  top = target;
  _ref1 = name.split('.');
  for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
    item = _ref1[_i];
    target = target[item] || (target[item] = {});
  }
  return block(target, top);
};

namespace('ShaderJs', function(exports) {
  var Base, Fragment, Vertex, _ref, _ref1;
  exports.Base = Base = (function() {
    function Base() {}

    Base.prototype.init = function() {};

    Base.prototype.process = function() {};

    Base.prototype.compile = function() {
      var ast;
      ast = this.parse();
      return this.generate(ast);
    };

    Base.prototype.parse = function() {
      var init_src, process_src;
      init_src = this.init.toString();
      process_src = this.process.toString();
      return [];
    };

    Base.prototype.generate = function(ast) {};

    return Base;

  })();
  exports.Fragment = Fragment = (function(_super) {
    __extends(Fragment, _super);

    function Fragment() {
      _ref = Fragment.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return Fragment;

  })(Base);
  exports.Vertex = Vertex = (function(_super) {
    __extends(Vertex, _super);

    function Vertex() {
      _ref1 = Vertex.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return Vertex;

  })(Base);
});
